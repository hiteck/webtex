# This file is dedicated to the public domain.

# Fundamental TeX commands
#
# Each command is associated with a built-in control sequence. There are,
# however, additional built-in control sequences not listed here associated
# with each "named parameter" (cf. namedparams.txt). In the TeX
# implementation, many similar commands are implemented with common codepaths
# and mode arguments; I've annotated these in comments. I've also annotated
# when the command and its associated control sequence have dissimilar names.
#
# I haven't quite figured out how to deal with all of these, so the
# implementation and/or data table format will probably evolve.
#
# expand: whether this command is expandable into a new set of tokens to
#   be evaluated
# cond: whether this command starts a conditional
# prefixing: prefixing mode. Sets whether this command can legally accept or
#   propagate \global, etc., prefixed.
#
# The file tex.py in commits 499ed6ca2 or earlier list the builtin control
# sequences with some annotations about their origins. That list was manually
# constructed from examinination of TeX: The Program, and seems to have been
# complete except for the omission of "noindent".

#escname		expand	cond	prefixing

-			n	n	none	# -> "discretionary"
/			n	n	none	# "ital_corr" command in TeX
_space_			n	n	none	# "ex_space" command
above			n	n	none
abovewithdelims		n	n	none	# -> "above"
accent			n	n	none
advance			n	n	assign	# via "prefixed_command"
afterassignment		n	n	none
aftergroup		n	n	none
atop			n	n	none	# -> "above"
atopwithdelims		n	n	none	# -> "above"
badness			n	n	none	# -> "last_item"
batchmode		n	n	assign	# -> "set_interaction" via "prefixed_command"
beginL			n	n	none	# eTeX
beginR			n	n	none	# eTeX
begingroup		n	n	none
botmark			yes	n	none	# -> "top_bot_mark"
botmarks		yes	n	none	# eTeX
box			n	n	none	# -> "make_box"
catcode			n	n	assign	# -> "def_code" via "prefixed_command"
char			n	n	none	# "char_num" command
chardef			n	n	assign	# -> "shorthand_def" via "prefixed_command"
cleaders		n	n	none	# -> "leader_ship"
closein			n	n	none	# -> "in_stream"
closeout		n	n	none	# -> *"extension"
copy			n	n	none	# -> "make_box"
count			n	n	assign	# -> "register" via "prefixed_command"
countdef		n	n	assign	# -> "shorthand_def" via "prefixed_command"
cr			n	n	none	# -> "car_ret"
crcr			n	n	none	# -> "car_ret"
csname			yes 	n	none
deadcycles		n	n	assign	# -> "set_page_int" via "prefixed_command"
def			n	n	full	#  via "prefixed_command"
delcode			n	n	assign	# -> "def_code" via "prefixed_command"
delimiter		n	n	none	# "delim_num" cmd; also: noneid_char
detokenize		yes	n	none	# eTeX
dimen			n	n	assign	# -> "register" via "prefixed_command"
dimendef		n	n	assign	# -> "shorthand_def" via "prefixed_command"
discretionary		n	n	none
displaylimits		n	n	none	# -> "limit_switch"
displaystyle		n	n	none	# -> "math_style"
divide			n	n	assign	#  via "prefixed_command"
dp			n	n	assign	# -> "set_box_dimen" via "prefixed_command"
dump			n	n	none	# -> "stop"
edef			n	n	full	 # -> "def" via "prefixed_command"
else			yes	n	none	# -> "fi_or_else"
end			n	n	none	# -> "stop"
endL			n	n	none	# eTeX
endR			n	n	none	# eTeX
endcsname		n	n	none
endgroup		n	n	none
endinput		n	n	none	# -> "input"
endtemplate		yes	n	none
eqno			n	n	none
errmessage		n	n	none	# -> "message"
errorstopmode		n	n	assign	# -> "set_interaction" via "prefixed_command"
eTeXrevision		yes	n	none	# eTeX (duh); note this is *not* an int
expandafter		yes	n	none
fi			yes	n	none	# -> "fi_or_else"
firstmark		yes	n	none	# -> "top_bot_mark"
firstmarks		yes	n	none	# eTeX
font			n	n	assign	# "def_font" command via "prefixed_command"
fontdimen		n	n	assign	# "assign_font_dimen" cmd via "prefixed_command"
fontname		yes	n	none	# -> "convert"
futurelet		n	n	assign	# -> "let" via "prefixed_command"
gdef			n	n	full	# -> "def" via "prefixed_command"
global			n	n	full	# -> "prefix"
halign			n	n	none
hbox			n	n	none	# -> "make_box"
hfil			n	n	none	# -> "hskip"
hfill			n	n	none	# -> "hskip"
hfilneg			n	n	none	# -> "hskip"
hrule			n	n	none
hskip			n	n	none
hss			n	n	none	# -> "hskip"
ht			n	n	assign	# -> "set_box_dimen" via "prefixed_command"
hyphenation		n	n	none # -> "hyph_data"
hyphenchar		n	n	none # -> "assign_font_int"
if			yes	yes	none
ifcase			yes	yes	none	# -> "if"
ifcat			yes	yes	none	# -> "if"
ifcsname		yes	yes	none	# eTeX
ifdefined		yes	yes	none	# eTeX
ifdim			yes	yes	none	# -> "if"
ifeof			yes	yes	none	# -> "if"
iffalse			yes	yes	none	# -> "if"
iffontchar		yes	yes	none	# eTeX
ifhbox			yes	yes	none	# -> "if"
ifhmode			yes	yes	none	# -> "if"
ifinner			yes	yes	none	# -> "if"
ifmmode			yes	yes	none	# -> "if"
ifnum			yes	yes	none	# -> "if"
ifodd			yes	yes	none	# -> "if"
iftrue			yes	yes	none	# -> "if"
ifvbox			yes	yes	none	# -> "if"
ifvmode			yes	yes	none	# -> "if"
ifvoid			yes	yes	none	# -> "if"
ifx			yes	yes	none	# -> "if"
ignorespaces		n	n	none
immediate		n	n	none	# -> *"extension"
indent			n	n	none	# -> "start_par"
input			n	n	none
inputlineno		n	n	none	# -> "last_item"
insert			n	n	none
insertpenalties		n	n	assign	# -> "set_page_int" via "prefixed_command"
jobname			yes	n	none	# -> "convert"
kern			n	n	none
lastbox			n	n	none	# -> "make_box"
lastkern		n	n	none	# -> "last_item"
lastpenalty		n	n	none	# -> "last_item"
lastskip		n	n	none	# -> "last_item"
lccode			n	n	assign	# -> "def_code" via "prefixed_command"
leaders			n	n	none	# -> "leader_ship"
left			n	n	none	# -> "left_right"
leqno			n	n	none	# -> "eqno"
let			n	n	assign	#  via "prefixed_command"
limits			n	n	none	# -> "limit_switch"
long			n	n	full	# -> "prefixed_command"
lower			n	n	none	# -> "vmove"
lowercase		n	n	none	# -> "caseshift"
mark			n	n	none
marks			n	n	none	# eTeX
mathaccent		n	n	none
mathbin			n	n	none	# -> "math_comp"
mathchar		n	n	none	# "math_char_num" command
mathchardef		n	n	assign	# -> "shorthand_def" via "prefixed_command"
mathchoice		n	n	none
mathclose		n	n	none	# -> "math_comp"
mathcode		n	n	assign	# -> "def_code" via "prefixed_command"
mathinner		n	n	none	# -> "math_comp"
mathop			n	n	none	# -> "math_comp"
mathopen		n	n	none	# -> "math_comp"
mathord			n	n	none	# -> "math_comp"
mathpunct		n	n	none	# -> "math_comp"
mathrel			n	n	none	# -> "math_comp"
meaning			yes	n	none	# -> "convert"
message			n	n	none
middle			n	n	none	# eTeX
mkern			n	n	none
moveleft		n	n	none	# -> "hmove"
moveright		n	n	none	# -> "hmove"
mskip			n	n	none
multiply		n	n	assign
muskip			n	n	assign	# -> "register" via "prefixed_command"
muskipdef		n	n	assign	# -> "shorthand_def" via "prefixed_command"
noalign			n	n	none
noboundary		n	n	none
noexpand		yes	n	none
noindent		n	n	none	# -> "start_par"
nolimits		n	n	none	# -> "limit_switch"
nonscript		n	n	none
nonstopmode		n	n	assign	# -> "set_interaction" via "prefixed_command"
nullfont		n	n	assign	# -> "set_font" via "prefixed_command"
number			yes	n	none	# -> "convert"
omit			n	n	none
openin			n	n	none	# -> "in_stream"
openout			n	n	none	# -> *"extension"
or			yes	n	none	# -> "fi_or_else"
outer			n	n	full	# -> "prefixed_command"
over			n	n	none	# -> "above"
overline		n	n	none	# -> "math_comp"
overwithdelims		n	n	none	# -> "above"
pagedepth		n	n	assign	# -> "set_page_dimen" via "prefixed_command"
pagefilllstretch	n	n	assign	# -> "set_page_dimen" via "prefixed_command"
pagefillstretch		n	n	assign	# -> "set_page_dimen" via "prefixed_command"
pagefilstretch		n	n	assign	# -> "set_page_dimen" via "prefixed_command"
pagegoal		n	n	assign	# -> "set_page_dimen" via "prefixed_command"
pageshrink		n	n	assign	# -> "set_page_dimen" via "prefixed_command"
pagestretch		n	n	assign	# -> "set_page_dimen" via "prefixed_command"
pagetotal		n	n	assign	# -> "set_page_dimen" via "prefixed_command"
par			n	n	none	# "par_end" cmd; also: active_char,match
parshape		n	n	assign	# "set_shape" command via "prefixed_command"
patterns		n	n	none	# -> "hyph_data" via "prefixed_command"
penalty			n	n	none	# "break_penalty" command
prevdepth		n	n	assign	# -> "set_aux" via "prefixed_command"
prevgraf		n	n	assign	# "set_prev_graf" command via "prefixed_command"
protected		yes	n	full	# eTeX
radical			n	n	none
raise			n	n	none	# -> "vmove"
read			n	n	assign	# "read_to_cs" command via "prefixed_command"
readline		n	n	assign	# eTeX via "prefixed_command"
relax			n	n	none	# also: escape
right			n	n	none	# -> "left_right"
romannumeral		yes	n	none	# -> "convert"
scantokens		yes	n	none	# eTeX
scriptfont		n	n	assign	# -> "def_family" via "prefixed_command"
scriptscriptfont	n	n	assign	# -> "def_family" via "prefixed_command"
scriptstyle		n	n	none	# -> "math_style"
scriptscriptstyle	n	n	none	# -> "math_style"
scrollmode		n	n	assign	# -> "set_interaction" via "prefixed_command"
setbox			n	n	assign	#  via "prefixed_command"
setlanguage		n	n	none	# -> *"extension"
sfcode			n	n	assign	# -> "def_code" via "prefixed_command"
shipout			n	n	none	# -> "leader_ship"
show			n	n	none	# -> "xray"
showbox			n	n	none	# -> "xray"
showgroups		n	n	none	# eTeX
showlists		n	n	none	# -> "xray"
showthe			n	n	none	# -> "xray"
showtokens		n	n	none	# eTeX
skewchar		n	n	assign	# -> "assign_font_int" via "prefixed_command"
skip			n	n	assign	# -> "register" via "prefixed_command"
skipdef			n	n	assign	# -> "shorthand_def" via "prefixed_command"
spacefactor		n	n	assign	# -> "set_aux" via "prefixed_command"
span			n	n	none	# "tab_mark" command
special			n	n	none	# -> *"extension"
splitbotmark		yes	n	none	# -> "top_bot_mark"
splitbotmarks		yes	n	none	# eTeX
splitfirstmark		yes	n	none	# -> "top_bot_mark"
splitfirstmarks		yes	n	none	# eTeX
string			yes	n	none	# -> "convert"
textfont		n	n	assign	# -> "def_family" via "prefixed_command"
textstyle		n	n	none	# -> "math_style"
the			yes	n	none
toks			n	n	assign	# "toks_register" command via "prefixed_command"
toksdef			n	n	assign	# -> "shorthand_def" via "prefixed_command"
topmark			yes	n	none	# -> "top_bot_mark"
topmarks		yes	n	none	# eTeX
uccode			n	n	assign	# -> "def_code" via "prefixed_command"
underline		n	n	none	# -> "math_comp"
unexpanded		yes	n	none	# eTeX
unhbox			n	n	none
unhcopy			n	n	none	# -> "unhbox"
unkern			n	n	none	# -> "remove_item"
unless			yes	yes	none	# eTeX
unpenalty		n	n	none	# -> "remove_item"
unskip			n	n	none	# -> "remove_item"
unvbox			n	n	none
unvcopy			n	n	none	# -> "unvbox"
uppercase		n	n	none	# -> "caseshift"
vadjust			n	n	none
valign			n	n	none
vbox			n	n	none	# -> "make_box"
vcenter			n	n	none
vrule			n	n	none
vfil			n	n	none	# -> "vskip"
vfill			n	n	none	# -> "vskip"
vfilneg			n	n	none	# -> "vskip"
vskip			n	n	none
vsplit			n	n	none	# -> "make_box"
vss			n	n	none	# -> "vskip"
vtop			n	n	none	# -> "make_box"
wd			n	n	assign	# -> "set_box_dimen" via "prefixed_command"
write			n	n	none	# -> *"extension"
xdef			n	n	full	# -> "def" via "prefixed_command"
xleaders		n	n	none	# -> "leader_ship"

WEBTEXtraceon		n	n	none
